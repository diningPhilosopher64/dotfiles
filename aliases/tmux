#!/usr/bin/env bash

# Always assuming you never want to nest anything : sessions, tmux server etc.
# If making a new session, it will never be a new nested session. It will always
# be a new session alongside/sibling-of the current session.


# To navigate to next  session : prefix + (
# To navigate to previous  session : prefix + )
# To navigate to previous  window  : prefix + p
# To navigate to next  window  : prefix + n
# To split a window : prefix + %

alias tmux='tmux -u'
export MY_SHELL="bash"

# Server stuff
function trmserver {
    tmux kill-server
}




function ta {
    if [ -z "$1" ]
    then
        __select_session session_name
        tmux -u attach -t "$session_name"
    else
        tmux -u attach -t "$1"
    fi
}

function td {
    tmux detach 
}


################ tmux session related stuff ################


function trmsession {
    tmux kill-session
}


function tls {
    tmux list-sessions  
}

function __select_session {
    selected_option=$(tls | fzf)
    arr=(${selected_option//:/ })
    session_name=${arr[0]}
    echo $session_name
}


# function __tmks {
    # if [ -z "$1" ]
    # then
        # print "Error: tmux session must have a name"
        # return 
    # fi
    # 
    # if [ -z "$2" ]
    # then
        # if tmux -u new-session -s "$1" /bin/bash > /dev/null 2>&1; then
            # print "Created new session on the server with name $1"
        # else
            # print "Already in a session. Creating a detached session with name $1"
            # tmux -u new-session -d -s "$1" /bin/bash 
        # fi
    # else
        # if tmux -u new-session -s "$1" -c "$2" /bin/bash > /dev/null 2>&1; then
            # print "Created session on a new server with name $1 and path $2"
        # else
            # print "Already in a session. Creating a detached session with name $1 and path $2"
            # tmux -u new-session -d -s "$1" -c "$2" /bin/bash 
        # fi
# 
    # fi
# }


# Change/Switch to a session
function tchs {
    if [ -z "$1" ]
    then
        session_name=$(__select_session)
    else 
        session_name=$1
    fi
    
    # For $1, you can pass either session_name or session_name and window_name or 
    # session_name and window_name and pane_number.
    # Format is : <session_name>:<window_name>:<pane_number>

    if [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; then
      tmux switch-client -t $session_name 2> /dev/null
    else
        tmux attach -t $session_name
    fi

    
}

# tmux-sessionizer
function tmux_sessionizer {

	current_working_dir=$(pwd)

    common_directories=(~ ~/Downloads ~/Documents)                                  

    personal_directories=(~/work ~/work/personal)                                   
    
    office_directories=(~ /sandbox/skondapa/Projects/fte/jupyter_matlab_proxy /sandbox/skondapa/Projects/fte /work)
    
    all_directories+=( "${current_working_dir[@]}" "${personal_directories[@]}"  "${office_directories[@]}" "${common_directories[@]}" )

    valid_directories=()                                                            
                                                                                    
    for directory in ${all_directories[@]}; do                                      
        if [ -d $directory ]; then                                                  
            valid_directories[${#valid_directories[@]}]=$directory                  
        fi                                                                          
    done                                                                            

    if [[ $# -eq 1 ]]; then
        complete_path=$1
    else
        complete_path=$(find ${valid_directories[*]} -mindepth 1 -maxdepth 2  -type d | fzf)
    fi

    folder_name=$(basename "$complete_path" | tr . _)                                    

    # Set the --print-query flag to FZF_DEFAULT_OPTS env var
    # This will print out the typed query in fzf even if it doesn't exist
    # If we search for a non-existent folder, then $complete_path and $folder_name
    # Will be the same. I can use this to create a folder in the current pwd with $folder_name
    # and create a tmux session for it.
    if [[ "$folder_name" == "$complete_path" ]]; then                                                  
        print "Folder doesn't exist. Will create and launch tmux there"
        mkdir "$PWD/$folder_name"
        complete_path="$PWD/$folder_name"
    fi                                                                          
    
    if ! tmux has-session -t "$folder_name" 2> /dev/null; then                                  
        #__tmks "$folder_name" "$complete_path"                                             
        tmux new-session -s "$folder_name" -c "$complete_path" -d "$MY_SHELL" 
    fi                                                                              
    
   tchs "$folder_name"   
}

alias 'ts'='tmux_sessionizer'

################ tmux window related stuff ################

#function tmkw {
#    tmux new-window    
#}

function tmkw {
    if [ -z "$1" ]
    then
        print "Error: tmux window must have a name"
        return 
    fi
   
    cwd=$(pwd)
    if [ -z "$2" ]
    then
       tmux -u new-window -n "$1" -c cd $cwd  bash
    else
       tmux -u new-window -n "$1"  -c "$2" bash
    fi
}

function tmvw {
    tmux rename-window "$1"
}

function tchw {
    if [ -z "$1" ]
    then
        window_name=$(__select_window)
    else 
        window_name=$1
    fi
    
    # Will use tchs to change to current active session and the window_name using the format 
    # Format is : <session_name>:<window_name>:<pane_number>

    current_session_name=$(tmux display-message -p '#S')
    tchs $current_session_name:$window_name
}


function __select_window {
    selected_option=$(tmux list-windows | fzf) 
    arr=(${selected_option//:/ })
    chosen_window=${arr[0]}
    echo $chosen_window
}

################################# Key Bindings ##################################

# Binds Ctrl + t to launch tmux sessionizer
bind -x '"\C-t":"tmux_sessionizer"'

# Binds Ctrl + f to launch tmux sessionizer
bind -x '"\C-f":"tchw"'

