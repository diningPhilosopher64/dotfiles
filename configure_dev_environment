#!/usr/bin/env bash 

export BASH_RC_FILE="/home/$USER/.bashrc"
export TMUX_CONF_FILE="/home/$USER/.tmux.conf"
export NEOVIM_PATH="/home/$USER/.config/nvim"
export LUNARVIM_PATH="/home/$USER/.config/lvim"
export LUNARVIM_CONFIG_FILE_PATH="/home/$USER/.config/lvim/config.lua"
export DOTFILES_PATH="/home/$USER/dotfiles"
export MY_BASH_RC_FILE_NAME=".bashrc.sourabh"
export MY_TMUX_CONF_FILE_NAME=".tmux.conf.sourabh"
export NEOVIM_EXECUTABLE_PATH=`which nvim`


# TODO: Check if fzf is installed, if not, git clone fzf into ~/appimages folder 
# TODO: Check if Tmux is installed. If not install first.

function repeat {
    num="${2:-100}"; printf -- "$1%.0s" $(seq 1 $num);
}

function print {
    terminalCols=$(tput cols)                                                   
    argLen=${#1}                                                                
    offset=$(((terminalCols-argLen)/2))                                         

    printf "\n"                                                                 
    repeat '#' $((offset-1))                                                    
    printf " $1 "                                                               
    repeat '#' $((offset-1))                                                    
    printf "\n" 
}


function configure_bashrc {
    if [ -f "$BASH_RC_FILE" ]; then
        print "Found file $BASH_RC_FILE"
    else
        print "No existing file found at $BASH_RC_FILE. Creating one..."
        touch "$BASH_RC_FILE"
    fi

    if grep -q -F "$MY_BASH_RC_FILE_NAME" "$BASH_RC_FILE"; then 
        print "Found $MY_BASH_RC_FILE_NAME reference in $BASH_RC_FILE. Doing nothing..."
    else
        echo  "source $DOTFILES_PATH/$MY_BASH_RC_FILE_NAME" >> "$BASH_RC_FILE" 
        print "Sourced $MY_BASH_RC_FILE_NAME in $BASH_RC_FILE"
    fi
}


function setup_softwares {
    if [ ! -d "$SOFTWARES_PATH" ]; then
        print "$SOFTWARES_PATH doesn't exist. Creating it..." 
        sudo mkdir "$SOFTWARES_PATH"
    fi

    setup_fzf
    setup_node
    configure_editor

}

function setup_node {
     if [ ! -z `which node` ]; then
       print "Found Node.js executable on PATH. Skipping download..."
     else
       print "Downloading nvm..."
       wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
       print "Installing latest node version"
       nvm install node
     fi
}

function setup_fzf {
  print "Checking if fzf is installed"
  
    if [ ! -z `find $SOFTWARES_PATH -name fzf` ]; then
      print "Found fzf executable at $SOFTWARES_PATH"
    else 
      print "Downloading fzf v0.34.0..."
      wget -O "fzf.tar.gz" "https://github.com/junegunn/fzf/releases/download/0.34.0/fzf-0.34.0-linux_amd64.tar.gz"      
      print "Extracting..."
      tar -xvf fzf.tar.gz 
      print "Moved fzf to $SOFTWARES_PATH"
      sudo mv fzf $SOFTWARES_PATH
    fi
}


function configure_editor {
    print "Configuring Editor..."
    print "Checking if neovim exists ?"
    if [ ! -z `find $SOFTWARES_PATH -name nvim.*` ]; then
        print "Found neovim executable at $SOFTWARES_PATH. Skipping download..."
    else
        print "neovim executable not found in path. Fetching the latest stable version of neovim"
        wget "https://github.com/neovim/neovim/releases/download/stable/nvim.appimage"
        chmod u+x nvim.appimage
        print "Moving nvim.appimage to $SOFTWARES_PATH"
        sudo mv ./nvim.appimage $SOFTWARES_PATH
        # sudo ln -s $SOFTWARES_PATH/nvim.appimage /usr/bin/nvim
    fi

  print "Configure either Neovim or Lunarvim. Press 1 for Neovim or 2 for lunarvim"
  read -p "Continue (1/2)?" choice

  if [ "$choice" = "1" ]; then
    configure_neovim 
  else   
    configure_lunarvim
  fi
}


function configure_lunarvim {
    print "Checking if lunarvim is installed..."
     if [ ! -z `which lvim` ]; then
         print "Found lvim on PATH. Skipping installation"
     else
        bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh) -y --no-install-dependencies
        print "Successfully installed lunarvim with no optional dependencies"
     fi

  print "Configuring lunarvim..."

  init_file="init.lua"
  if grep -q -F "$init_file" "$LUNARVIM_CONFIG_FILE_PATH"; then 
      print "Found $init_file reference in $LUNARVIM_CONFIG_FILE_PATH. Doing nothing..."
  else
      content="\n\n\n-- Sourabh's custom config\nlocal user = os.getenv(\"USER\")\nlocal init_path = string.format(\"/home/%s/dotfiles/lvim/init.lua\", user)\ndofile(init_path)" 
      echo -e "$content" >> "$LUNARVIM_CONFIG_FILE_PATH" 
      print "Sourced content in $LUNARVIM_CONFIG_FILE_PATH"
  fi
}


function configure_neovim {

    if [ -d "$NEOVIM_PATH" ]; then
       print "$NEOVIM_PATH already exists. Do you want to delete the existing folder ?" 
       read -p "Continue (y/n)?" choice

       if [ "$choice" = "y" ]; then
          cp -r "$DOTFILES_PATH/nvim" "/home/$USER/.config/"
          print "You need to run PackerSync/Install" 
        else   
          print "Not replacing neovim config"
       fi

    else
       print "$NEOVIM_PATH doesnt exist. Copying nvim folder from $DOTFILES_PATH." 
       cp -r "$DOTFILES_PATH/nvim" "/home/$USER/.config/" && print "You need to run PackerSync/Install"
    fi
}

function configure_tmux {
    if [ -f "$TMUX_CONF_FILE" ]; then
        print "Found file $TMUX_CONF_FILE"
    else
        print "No existing file found at $TMUX_CONF_FILE. Creating one..."
        touch "$TMUX_CONF_FILE"
    fi

    if [ ! -f "~/.tmux/plugins/tpm" ]; then
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    fi

    if grep -q -F "$MY_TMUX_CONF_FILE_NAME" "$TMUX_CONF_FILE"; then 
        print "Found $MY_TMUX_CONF_FILE_NAME reference in $TMUX_CONF_FILE. Doing nothing..."
    else
        echo "source-file $DOTFILES_PATH/$MY_TMUX_CONF_FILE_NAME" >> "$TMUX_CONF_FILE" 
        echo "source-file $HOME/dotfiles/.tmux.theme.gruvbox" >> "$TMUX_CONF_FILE"  
        print "Sourced $MY_TMUX_CONF_FILE_NAME and theme in $TMUX_CONF_FILE"
    fi
}

# Modify ~/.bashrc
configure_bashrc

# Source it to load new changes
source ~/.bashrc

setup_softwares
