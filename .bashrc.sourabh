#######################################################################################################
#                                               My Stuff


########################################################################################################

# EXPORTS env vars
export FZF_DEFAULT_OPTS='--height 40% --preview-window=right  --layout=reverse --border'
export PATH="/usr/softwares/clang_12/bin:$PATH"
export LD_LIBRARY_PATH="/usr/softwares/clang_12/bin/"
export N_PREFIX="/usr/softwares/node_versions/"
export PATH="$N_PREFIX/bin:$PATH"
export GOPATH="$HOME/go"
export SOFTWARES_PATH="/usr/softwares"
export SOFTLINKS_DIRECTORY="/usr/softlinks" 

# export PATH="/usr/softwares/node-v14.16.0-linux-x64/bin:$PATH"
# Enable vim shortcuts in bash
set -o vi

# if bash is not default shell for the current OS, then it means that this bash is a child process
# For ssh keys to work: 
# ssh-agent bash
# ssh-add path_to_private_key

# Added by cargo ?
. "$HOME/.cargo/env"

# Adding custom paths to system path
# export PATH="/usr/local/lib:$PATH"  # npm global install location.

# Adding path to my all custom soflinks to system path
export PATH="$SOFTLINKS_DIRECTORY:$PATH"  # path to custom softwares like neovim, fzf etc.

# Go path
export PATH=$PATH:/usr/local/go/bin 

# Adding anaconda executables to path 

if [ -d /usr/softwares/miniconda3/bin ]; then
    # Add to system path if directory exists
    export PATH="/usr/softwares/miniconda3/bin:$PATH"
fi

# enable color support of ls and also add handy aliases                         
if [ -x /usr/bin/dircolors ]; then                                              
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'                                                  
    #alias dir='dir --color=auto'                                               
    #alias vdir='vdir --color=auto'                                             

    alias grep='grep --color=auto'                                              
    alias fgrep='fgrep --color=auto'                                            
    alias egrep='egrep --color=auto'                                            
fi  

# enable programmable completion features (you don't need to enable             
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile            
# sources /etc/bash.bashrc).                                                    
if ! shopt -oq posix; then                                                      
  if [ -f /usr/share/bash-completion/bash_completion ]; then                    
    . /usr/share/bash-completion/bash_completion                                
  elif [ -f /etc/bash_completion ]; then                                        
    . /etc/bash_completion                                                      
  fi                                                                            
fi  

# params passed can be aliases with the below cmd.
                                                                                
shopt -s cdable_vars                                                            
export projects=/mathworks/devel/sandbox/skondapa/Projects/fte                                  
export dotfiles=~/dotfiles/
export softwares=/usr/softwares/
export softlinks=/usr/softlinks/
export starship=~/.config/starship.toml   



########################## nvm ##########################
export NVM_DIR="$SOFTWARES_PATH/nvm"

##########################neovim / lvim##########################

alias 'v'='lvim'
alias 'neovim'='nvim'
alias 'nvim'='neovim'

##########################fzf##########################

# Setup fzf
# ---------
if [[ ! "$PATH" == */home/"$USER"/appimages/fzf/bin* ]]; then
  export PATH="${PATH:+${PATH}:}/home/"$USER"/appimages/fzf/bin"
fi

# Auto-completion
# ---------------
[[ $- == *i* ]] && source "/home/"$USER"/appimages/fzf/shell/completion.bash" 2> /dev/null

# Key bindings
# ------------
source "/home/"$USER"/appimages/fzf/shell/key-bindings.bash"


##########################Byobu##########################

alias 'b'='byobu'
alias 'bls'='byobu list-session'
alias 'bks'='byobu kill-session -t'


##########################.bashrc##########################
function openf {                                                                
                                                                                
    if [ "$1" = "brc" ]                                                         
    then                                                                        
        vim ~/.bashrc                                                           
                                                                                
    elif [ "$1" = "i3" ]                                                        
    then                                                                        
        vim ~/.config/i3/config                                                 
                                                                                
    elif [ "$1" = "vrc" ]                                                       
    then                                                                        
        vim ~/.vimrc                                                            

    elif [ "$1" = "ssh" ]
    then
         vim ~/.ssh/config 

    else                                                                        
        echo "Unknown param: $1"                                                
    fi                                                                          
}   


# extract any type of compressed file
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}


# Shutdown and restart
alias shutdown='shutdown -h now'
alias restart='shutdown -r now'

# bash history specific config
# HISTCONTROL=ignorespace:ignoredups
HISTCONTROL=ignoreboth:erasedups
HISTIGNORE="history:ls:pwd:"
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# Below are specific to zsh

# setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
# setopt SHARE_HISTORY             # Share history between all sessions.
# setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
# setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
# setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
# setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
# setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
# setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

# Adding pipenv virtualenvs path 
export PATH="/home/skondapa/.local/bin:$PATH"

# export PATH="/usr/softwares/miniconda3/bin:$PATH"  # commented out by conda initialize

#reload/source bashrc
alias 'sourcerc'='source ~/.bashrc'

# copy/paste to system clipboard
alias copy='xsel --clipboard --input'
alias paste='xsel --clipboard --output'

alias ":q"="exit"

# get process id from port
function getpid-port {
     lsof -n -i :$1
}

function repeat {
    num="${2:-100}"; printf -- "$1%.0s" $(seq 1 $num);
}

# custom print function for pretty printing aliases/ functions
function print {
    terminalCols=$(tput cols)
    argLen=${#1}
    offset=$(((terminalCols-argLen)/2))

    printf "\n"
    repeat '#' $((offset-1))
    printf " $1 "
    repeat '#' $((offset-1))
    printf "\n"     
}

# Clear the screen.
function c(){
    clear;
}

# Show the command line history.
function h(){
    history;
}

# Go back directory level.
function ..(){
    builtin cd ..; pwd;
}

# Go back directory level.
function ...(){
    builtin cd ../..; pwd;
}

# List almost all files with classification.
function l(){
    ls --color=auto -F;
}

# List all files with classification.
function la(){
    ls --color=auto -A -F;
}

# Long list almost all files with classification and a humanly-readable size.
function ll(){
    ls --color=auto -A -F -l -h;
}

########################### general ##########################  

function mkcd {
    mkdir "$1"
    cd "$1"
}

alias 'goto'='cd'
alias 'open'='nautilus'
alias 'install'='sudo apt install -y'
alias 'remove'='sudo apt remove -y'
alias 'open_p'='pcmanfm -d projects & exit'
alias 'i'='install'
alias 'b'='bash'

function kill_process {                                                         
    if [ -z "$1" ]                                                              
    then                                                                        
       print "Pass a process name as a parameter"
    else                                                                        
       pgrep "$1" | xargs kill -9                                               
    fi                                                                          
}                                                                               
                                                                                
alias 'killp'='kill_process'                                                    
alias 'killProcess'='kill_process'  

##########################Starship##########################
eval "$(starship init bash)"

########################## node ########################## 
source /home/"$USER"/dotfiles/aliases/node

########################## docker ########################## 
source /home/"$USER"/dotfiles/aliases/docker

##########################git##########################
source /home/"$USER"/dotfiles/aliases/git

##########################Conda########################## 
source /home/"$USER"/dotfiles/aliases/anaconda

########################## Serverless Framework ########################## 
source /home/"$USER"/dotfiles/aliases/serverless 

###########################python/pip##########################  
source /home/"$USER"/dotfiles/aliases/python 


################################ tmux ##################################
source /home/"$USER"/dotfiles/aliases/tmux

################ Alacritty ##################
source /home/"$USER"/dotfiles/aliases/alacritty


################################# Temp ##################################
function runInteg {
# $1 = MWI_BASE_URL
# $2 = MWI_APP_PORT 

if [ -z "$1" ]
    then
       MWI_BASE_URL=""
    else
       MWI_BASE_URL="$1"
    fi

    if [ -z "$2" ]
    then
       MWI_APP_PORT=8888
    else
       MWI_APP_PORT="$2"
    fi

    #echo -e "MWI_BASE_URL=${MWI_BASE_URL} MWI_APP_PORT=${MWI_APP_PORT}  matlab-jupyter-app \n \n" 
     MWI_BASE_URL=$MWI_BASE_URL MWI_APP_PORT=$MWI_APP_PORT  matlab-web-desktop-app "$@" ||  MWI_BASE_URL=$MWI_BASE_URL MWI_APP_PORT=$MWI_APP_PORT  matlab-web-desktop-proxy "$@"  || MWI_BASE_URL=$MWI_BASE_URL MWI_APP_PORT=$MWI_APP_PORT matlab-jupyter-app "$@"
}
alias 'run_integ'='runInteg'
alias 'runinteg'='runInteg'

function denvs {
      print "Exiting out of any virtualenvs"
      cdenv
      denv
}


function setup_versions {

    for ((i=1; i<=$#; i++))
        do
          denvs

          print "Using python ${!i}"
          print "Removing any existing folder  .venv${!i}"
          rm -rf .venv"${!i}"
          
          caenv p"${!i}"
          mkvenv .venv"${!i}"
          denvs

        done
}

function install_in_versions {
    for ((i=1; i<=$#; i++))
        do
          setup_versions "${!i}"

          avenv .venv"${!i}"
          pip install .[dev]
          print "Finished installing package in .venv${!i}"
          denv
          
        done
}

